// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	usecase2 "lock-stock-v2/external/usecase"
	"lock-stock-v2/internal/domain/room/repository"
	repository3 "lock-stock-v2/internal/domain/room_user/repository"
	"lock-stock-v2/internal/domain/room_user/service"
	repository2 "lock-stock-v2/internal/domain/user/repository"
	"lock-stock-v2/internal/domain/user/service"
	"lock-stock-v2/internal/websocket"
	"lock-stock-v2/test/inMemory"
)

// Injectors from wire.go:

func InitializeTestJoinRoomResult() TestJoinRoomResult {
	roomUserRepository := ProvideInMemoryRoomUserRepository()
	manager := ProvideInMemoryWebSocketManager()
	joinRoomUsecase := services.NewJoinRoom(roomUserRepository, manager)
	roomRepository := ProvideInMemoryRoomRepository()
	userRepository := ProvideInMemoryUserRepository()
	testJoinRoomResult := TestJoinRoomResult{
		JoinRoom:     joinRoomUsecase,
		RoomRepo:     roomRepository,
		UserRepo:     userRepository,
		RoomUserRepo: roomUserRepository,
		WsManager:    manager,
	}
	return testJoinRoomResult
}

func InitializeTestCreateUserResult() TestCreateUserResult {
	userRepository := ProvideInMemoryUserRepository()
	createUser := service.NewCreateUser(userRepository)
	testCreateUserResult := TestCreateUserResult{
		CreateUser: createUser,
		UserRepo:   userRepository,
	}
	return testCreateUserResult
}

// wire.go:

type TestJoinRoomResult struct {
	JoinRoom usecase2.JoinRoom

	RoomRepo     *inMemory.RoomRepository
	UserRepo     *inMemory.UserRepository
	RoomUserRepo *inMemory.RoomUserRepository
	WsManager    websocket.Manager
}

type TestCreateUserResult struct {
	CreateUser usecase2.CreateUser
	UserRepo   *inMemory.UserRepository
}

func ProvideInMemoryRoomRepository() *inMemory.RoomRepository {
	return inMemory.NewInMemoryRoomRepository()
}

func ProvideInMemoryUserRepository() *inMemory.UserRepository {
	return inMemory.NewInMemoryUserRepository()
}

func ProvideInMemoryRoomUserRepository() *inMemory.RoomUserRepository {
	return inMemory.NewInMemoryRoomUserRepository()
}

func ProvideInMemoryWebSocketManager() websocket.Manager {
	return inMemory.NewInMemoryWebSocketManager()
}

var testSetWithStruct = wire.NewSet(

	ProvideInMemoryRoomRepository, wire.Bind(new(repository.RoomRepository), new(*inMemory.RoomRepository)), ProvideInMemoryUserRepository, wire.Bind(new(repository2.UserRepository), new(*inMemory.UserRepository)), ProvideInMemoryRoomUserRepository, wire.Bind(new(repository3.RoomUserRepository), new(*inMemory.RoomUserRepository)), ProvideInMemoryWebSocketManager, services.NewJoinRoom, wire.Bind(new(usecase2.JoinRoom), new(*services.JoinRoomService)), wire.Struct(new(TestJoinRoomResult), "*"),
)

var testSetCreateUser = wire.NewSet(

	ProvideInMemoryUserRepository, wire.Bind(new(repository2.UserRepository), new(*inMemory.UserRepository)), service.NewCreateUser, wire.Bind(new(usecase2.CreateUser), new(*service.CreateUserService)), wire.Struct(new(TestCreateUserResult), "*"),
)
