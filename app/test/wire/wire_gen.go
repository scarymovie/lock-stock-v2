// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"lock-stock-v2/external/websocket"
	repository3 "lock-stock-v2/internal/domain/room/repository"
	"lock-stock-v2/internal/domain/room_user/repository"
	"lock-stock-v2/internal/domain/room_user/service"
	repository2 "lock-stock-v2/internal/domain/user/repository"
	"lock-stock-v2/internal/domain/user/service"
	"lock-stock-v2/test/inMemory"
)

// Injectors from wire.go:

func InitializeTestJoinRoomResult() TestJoinRoomResult {
	roomUserRepository := ProvideInMemoryRoomUserRepository()
	manager := ProvideInMemoryWebSocketManager()
	joinRoomService := ProvideJoinRoomService(roomUserRepository, manager)
	roomRepository := ProvideInMemoryRoomRepository()
	userRepository := ProvideInMemoryUserRepository()
	testJoinRoomResult := TestJoinRoomResult{
		JoinRoom:     joinRoomService,
		RoomRepo:     roomRepository,
		UserRepo:     userRepository,
		RoomUserRepo: roomUserRepository,
		WsManager:    manager,
	}
	return testJoinRoomResult
}

func InitializeTestCreateUserResult() TestCreateUserResult {
	userRepository := ProvideInMemoryUserRepository()
	createUserService := ProvideCreateUserService(userRepository)
	testCreateUserResult := TestCreateUserResult{
		CreateUser: createUserService,
		UserRepo:   userRepository,
	}
	return testCreateUserResult
}

// wire.go:

type TestJoinRoomResult struct {
	JoinRoom *services.JoinRoomService

	RoomRepo     *inMemory.RoomRepository
	UserRepo     *inMemory.UserRepository
	RoomUserRepo *inMemory.RoomUserRepository
	WsManager    websocket.Manager
}

type TestCreateUserResult struct {
	CreateUser *service.CreateUserService
	UserRepo   *inMemory.UserRepository
}

func ProvideInMemoryRoomRepository() *inMemory.RoomRepository {
	return inMemory.NewInMemoryRoomRepository()
}

func ProvideInMemoryUserRepository() *inMemory.UserRepository {
	return inMemory.NewInMemoryUserRepository()
}

func ProvideInMemoryRoomUserRepository() *inMemory.RoomUserRepository {
	return inMemory.NewInMemoryRoomUserRepository()
}

func ProvideJoinRoomService(roomUserRepository repository.RoomUserRepository,
	wsManager websocket.Manager,
) *services.JoinRoomService {
	return services.NewJoinRoomService(roomUserRepository, wsManager)
}

func ProvideCreateUserService(userRepository repository2.UserRepository) *service.CreateUserService {
	return service.NewCreateUser(userRepository)
}

func ProvideInMemoryWebSocketManager() websocket.Manager {
	return inMemory.NewInMemoryWebSocketManager()
}

var testSetWithStruct = wire.NewSet(

	ProvideInMemoryRoomRepository, wire.Bind(new(repository3.RoomRepository), new(*inMemory.RoomRepository)), ProvideInMemoryUserRepository, wire.Bind(new(repository2.UserRepository), new(*inMemory.UserRepository)), ProvideInMemoryRoomUserRepository, wire.Bind(new(repository.RoomUserRepository), new(*inMemory.RoomUserRepository)), ProvideInMemoryWebSocketManager,
	ProvideJoinRoomService, wire.Struct(new(TestJoinRoomResult), "*"),
)

var testSetCreateUser = wire.NewSet(

	ProvideInMemoryUserRepository, wire.Bind(new(repository2.UserRepository), new(*inMemory.UserRepository)), ProvideCreateUserService, wire.Struct(new(TestCreateUserResult), "*"),
)
