// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"errors"
	"github.com/jackc/pgx/v5/pgxpool"
	"lock-stock-v2/external/transaction"
	"lock-stock-v2/external/websocket"
	"lock-stock-v2/handlers/http/room"
	"lock-stock-v2/handlers/http/user"
	"lock-stock-v2/handlers/http/ws"
	repository3 "lock-stock-v2/internal/domain/game/repository"
	"lock-stock-v2/internal/domain/game/service"
	"lock-stock-v2/internal/domain/room/repository"
	service2 "lock-stock-v2/internal/domain/room/service"
	repository4 "lock-stock-v2/internal/domain/room_user/repository"
	"lock-stock-v2/internal/domain/room_user/service"
	repository2 "lock-stock-v2/internal/domain/user/repository"
	service3 "lock-stock-v2/internal/domain/user/service"
	"lock-stock-v2/internal/infrastructure/postgres"
	transaction2 "lock-stock-v2/internal/infrastructure/postgres/transaction"
	websocket2 "lock-stock-v2/internal/infrastructure/websocket"
	"lock-stock-v2/router"
	"net/http"
)

// Injectors from wire.go:

func InitializeRouter() (http.Handler, error) {
	pool, err := ProvidePostgresPool()
	if err != nil {
		return nil, err
	}
	roomUserRepository := ProvideRoomUserRepository(pool)
	manager := ProvideWebSocketManager()
	joinRoomService := services.NewJoinRoomService(roomUserRepository, manager)
	roomRepository := ProvideRoomRepository(pool)
	userRepository := ProvideUserRepository(pool)
	roomUserService := services.NewRoomUserService(roomUserRepository)
	gameRepository := ProvideGameRepository(pool)
	playerRepository := ProvidePlayerRepository(pool)
	roundRepository := ProvideRoundRepository(pool)
	betRepository := ProvideBetRepository(pool)
	roundPlayerLogRepository := ProvideRoundPlayerLogRepository(pool)
	createRoundPlayerLog := service.NewCreateRoundPlayerLog(roundPlayerLogRepository)
	roundObserver := service.NewRoundObserver(roundPlayerLogRepository, manager)
	createBetService := service.NewCreateBetService(betRepository, manager, roundPlayerLogRepository, createRoundPlayerLog, roundObserver)
	createRoundService := service.NewCreateRoundService(roundRepository, createBetService, manager)
	createGameService := service.NewCreateGameService(roomUserRepository, gameRepository, playerRepository, createRoundService, manager)
	startGameService := service2.NewStartGameService(roomRepository, roomUserRepository, createGameService)
	sendAnswer := service.NewSendAnswer(roundPlayerLogRepository, manager, roundObserver)
	transactionManager := ProvideTransactionManager(pool)
	roomHandler := ProvideRoomHandler(joinRoomService, roomRepository, userRepository, roomUserService, startGameService, createBetService, sendAnswer, playerRepository, roundRepository, betRepository, gameRepository, roundPlayerLogRepository, manager, transactionManager)
	createUserService := service3.NewCreateUser(userRepository)
	userHandler := ProvideUserHandler(createUserService)
	webSocketHandler := ProvideWebSocketHandler(manager)
	handler := router.NewRouter(roomHandler, userHandler, webSocketHandler, userRepository)
	return handler, nil
}

// wire.go:

func ProvidePostgresPool() (*pgxpool.Pool, error) {
	config := postgres.GetPostgresConfig()
	pool := postgres.NewPostgresConnection(config)
	if pool == nil {
		return nil, errors.New("failed to create postgres pool")
	}

	return pool, nil
}

func ProvideWebSocketManager() websocket.Manager {
	manager := websocket2.NewWebSocketManager()
	go manager.Run()
	return manager
}

func ProvideTransactionManager(pool *pgxpool.Pool) transaction.TransactionManager {
	return transaction2.NewPostgresTransactionManager(pool)
}

func ProvideRoomHandler(
	joinRoomService *services.JoinRoomService,
	roomRepository repository.RoomRepository,
	userRepository repository2.UserRepository,
	roomUserService *services.RoomUserService,
	startGameService *service2.StartGameService,
	createBetService *service.CreateBetService,
	sendAnswerService *service.SendAnswer,
	playerRepository repository3.PlayerRepository,
	roundRepository repository3.RoundRepository,
	betRepository repository3.BetRepository,
	gameRepository repository3.GameRepository,
	roundPlayerLogRepository repository3.RoundPlayerLogRepository,
	webSocket websocket.Manager,
	transactionManager transaction.TransactionManager,
) *room.RoomHandler {
	return room.NewRoomHandler(
		joinRoomService,
		roomRepository,
		userRepository,
		roomUserService,
		startGameService,
		createBetService,
		playerRepository,
		roundRepository,
		betRepository,
		gameRepository,
		roundPlayerLogRepository,
		webSocket,
		sendAnswerService,
		transactionManager,
	)
}

func ProvideUserHandler(createUserService *service3.CreateUserService) *user.UserHandler {
	return user.NewUserHandler(createUserService)
}

func ProvideWebSocketHandler(manager websocket.Manager) *ws.WebSocketHandler {
	return ws.NewWebSocketHandler(manager)
}

func ProvideRoomRepository(db *pgxpool.Pool) repository.RoomRepository {
	return postgres.NewPostgresRoomRepository(db)
}

func ProvideUserRepository(db *pgxpool.Pool) repository2.UserRepository {
	return postgres.NewPostgresUserRepository(db)
}

func ProvideRoomUserRepository(db *pgxpool.Pool) repository4.RoomUserRepository {
	return postgres.NewPostgresRoomUserRepository(db)
}

func ProvideGameRepository(db *pgxpool.Pool) repository3.GameRepository {
	return postgres.NewPostgresGameRepository(db)
}

func ProvidePlayerRepository(db *pgxpool.Pool) repository3.PlayerRepository {
	return postgres.NewPostgresPlayerRepository(db)
}

func ProvideRoundRepository(db *pgxpool.Pool) repository3.RoundRepository {
	return postgres.NewPostgresRoundRepository(db)
}

func ProvideBetRepository(db *pgxpool.Pool) repository3.BetRepository {
	return postgres.NewPostgresBetRepository(db)
}

func ProvideRoundPlayerLogRepository(db *pgxpool.Pool) repository3.RoundPlayerLogRepository {
	return postgres.NewPostgresRoundPlayerLogRepository(db)
}
