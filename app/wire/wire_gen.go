// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"errors"
	"github.com/jackc/pgx/v5/pgxpool"
	"lock-stock-v2/handlers"
	http2 "lock-stock-v2/handlers/http"
	"lock-stock-v2/handlers/http/room"
	"lock-stock-v2/handlers/http/user"
	service2 "lock-stock-v2/internal/domain/room/service"
	"lock-stock-v2/internal/domain/room_user/service"
	"lock-stock-v2/internal/domain/user/service"
	"lock-stock-v2/internal/infrastructure/postgres"
	websocket2 "lock-stock-v2/internal/infrastructure/websocket"
	"lock-stock-v2/internal/websocket"
	"lock-stock-v2/router"
	"net/http"
)

// Injectors from wire.go:

func InitializeRouter() (http.Handler, error) {
	pool, err := ProvidePostgresPool()
	if err != nil {
		return nil, err
	}
	roomUserRepository := postgres.NewPostgresRoomUserRepository(pool)
	manager := ProvideWebSocketManager()
	joinRoomUsecase := services.NewJoinRoom(roomUserRepository, manager)
	roomRepository := postgres.NewPostgresRoomRepository(pool)
	roomUserService := services.services.NewRoomService(roomUserRepository)
	joinRoom := handlers.NewJoinRoom(joinRoomUsecase, roomRepository, roomUserService)
	getRooms := room.NewGetRooms(roomRepository)
	webSocketHandler := http2.NewWebSocketHandler(manager)
	userRepository := postgres.NewPostgresUserRepository(pool)
	createUser := service.NewCreateUser(userRepository)
	handlersCreateUser := user.NewUserHandler(createUser)
	startGameUsecase := service2.NewStartGameService(roomRepository, manager)
	startGame := room.NewStartGame(roomRepository, roomUserService, startGameUsecase)
	handler := router.NewRouter(joinRoom, getRooms, webSocketHandler, handlersCreateUser, startGame, userRepository)
	return handler, nil
}

// wire.go:

func ProvidePostgresPool() (*pgxpool.Pool, error) {
	config := postgres.GetPostgresConfig()
	pool := postgres.NewPostgresConnection(config)
	if pool == nil {
		return nil, errors.New("failed to create postgres pool")
	}

	return pool, nil
}

func ProvideWebSocketManager() websocket.Manager {
	manager := websocket2.NewWebSocketManager()
	go manager.Run()
	return manager
}
