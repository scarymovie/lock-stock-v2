// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"errors"
	"github.com/jackc/pgx/v5/pgxpool"
	"lock-stock-v2/handlers/http/room"
	"lock-stock-v2/handlers/http/user"
	"lock-stock-v2/handlers/http/ws"
	"lock-stock-v2/internal/domain/room/repository"
	"lock-stock-v2/internal/domain/room/service"
	repository3 "lock-stock-v2/internal/domain/room_user/repository"
	"lock-stock-v2/internal/domain/room_user/service"
	repository2 "lock-stock-v2/internal/domain/user/repository"
	service2 "lock-stock-v2/internal/domain/user/service"
	"lock-stock-v2/internal/infrastructure/postgres"
	websocket2 "lock-stock-v2/internal/infrastructure/websocket"
	"lock-stock-v2/internal/websocket"
	"lock-stock-v2/router"
	"net/http"
)

// Injectors from wire.go:

func InitializeRouter() (http.Handler, error) {
	pool, err := ProvidePostgresPool()
	if err != nil {
		return nil, err
	}
	roomUserRepository := ProvideRoomUserRepository(pool)
	manager := ProvideWebSocketManager()
	joinRoomService := services.NewJoinRoomService(roomUserRepository, manager)
	roomRepository := ProvideRoomRepository(pool)
	userRepository := ProvideUserRepository(pool)
	roomUserService := services.NewRoomUserService(roomUserRepository)
	startGameService := service.NewStartGameService(roomRepository, roomUserRepository, manager)
	roomHandler := ProvideRoomHandler(joinRoomService, roomRepository, userRepository, roomUserService, startGameService)
	createUserService := service2.NewCreateUser(userRepository)
	userHandler := ProvideUserHandler(createUserService)
	webSocketHandler := ProvideWebSocketHandler(manager)
	handler := router.NewRouter(roomHandler, userHandler, webSocketHandler, userRepository)
	return handler, nil
}

// wire.go:

func ProvidePostgresPool() (*pgxpool.Pool, error) {
	config := postgres.GetPostgresConfig()
	pool := postgres.NewPostgresConnection(config)
	if pool == nil {
		return nil, errors.New("failed to create postgres pool")
	}

	return pool, nil
}

func ProvideWebSocketManager() websocket.Manager {
	manager := websocket2.NewWebSocketManager()
	go manager.Run()
	return manager
}

func ProvideRoomHandler(
	joinRoomService *services.JoinRoomService,
	roomRepository repository.RoomRepository,
	userRepository repository2.UserRepository,
	roomUserService *services.RoomUserService,
	startGameService *service.StartGameService,
) *room.RoomHandler {
	return room.NewRoomHandler(joinRoomService, roomRepository, userRepository, roomUserService, startGameService)
}

func ProvideUserHandler(createUserService *service2.CreateUserService) *user.UserHandler {
	return user.NewUserHandler(createUserService)
}

func ProvideWebSocketHandler(manager websocket.Manager) *ws.WebSocketHandler {
	return ws.NewWebSocketHandler(manager)
}

func ProvideRoomRepository(db *pgxpool.Pool) repository.RoomRepository {
	return postgres.NewPostgresRoomRepository(db)
}

func ProvideUserRepository(db *pgxpool.Pool) repository2.UserRepository {
	return postgres.NewPostgresUserRepository(db)
}

func ProvideRoomUserRepository(db *pgxpool.Pool) repository3.RoomUserRepository {
	return postgres.NewPostgresRoomUserRepository(db)
}
